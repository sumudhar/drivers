require 'rails_helper'
require 'pry'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DriversController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Driver. As you add validations to Driver, be sure to
  # adjust the attributes here as well.


  describe "GET #drivers_list" do
    it "assigns all drivers as @drivers" do
      #driver = Driver.create! valid_attributes
      get :drivers_list, params:  {longitude: 12.3 ,latitude: 13.5}
      #binding.pry
      #expect(assigns(:drivers)).to eq([driver])
    end
  end


  # describe "PUT #location_update" do
  #
  #   before :each do
  #     @driver = FactoryGirl.create(:driver)
  #   end
  #
  #   it "should return Location details are not found with code 422 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:[]}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("Location details are not found")
  #   end
  #
  #   it "should return Location details are not found with code 422 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("Location details are not found")
  #   end
  #
  #   it "updates the requested driver location" do
  #         put :location_update, params: {id: @driver.to_param, driver_params:{"latitude"=>"12.971", "longitude"=>"77.59", "accuracy"=>"0.7"}}
  #         expect(response.status).to eq(200)
  #   end
  #
  #   it "should return accuracy can't be blank with code 422" do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{"latitude"=>"12.971", "longitude"=>"77.59"}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("{\"location.accuracy\":[\"can't be blank\"],\"location\":[\"is invalid\"]}")
  #   end
  #
  #   it "should return longitude can't be blank with code 422 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{"latitude"=>"12.971", "accuracy"=>"0.7"}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("{\"location.longitude\":[\"can't be blank\",\"is not a number\"],\"location\":[\"is invalid\"]}")
  #   end
  #
  #   it "should return latitude can't be blank with code 422 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{"accuracy"=>"0.7","longitude"=>"77.59"}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("{\"location.latitude\":[\"can't be blank\",\"is not a number\"],\"location\":[\"is invalid\"]}")
  #   end
  #
  #   it "should not update the driver location with invalid latitude with more than 90 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{"latitude"=>"100.971", "longitude"=>"77.59", "accuracy"=>"0.7"}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("{\"location.latitude\":[\"must be less than or equal to 90\"],\"location\":[\"is invalid\"]}")
  #   end
  #
  #   it "should not update the driver location with invalid longitude with more than 180 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{"latitude"=>"12.971", "longitude"=>"180.59", "accuracy"=>"0.7"}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("{\"location.longitude\":[\"must be less than or equal to 180\"],\"location\":[\"is invalid\"]}")
  #   end
  #
  #   it "should not update the driver location with invalid latitude with less than 90 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{"latitude"=>"-100.971", "longitude"=>"77.59", "accuracy"=>"0.7"}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("{\"location.latitude\":[\"must be greater than or equal to -90\"],\"location\":[\"is invalid\"]}")
  #   end
  #
  #   it "should not update the driver location with invalid longitude with less than 180 " do
  #     put :location_update, params: {id: @driver.to_param, driver_params:{"latitude"=>"12.971", "longitude"=>"-180.59", "accuracy"=>"0.7"}}
  #     expect(response.status).to eq(422)
  #     expect(response.body).to eq("{\"location.longitude\":[\"must be greater than or equal to -180\"],\"location\":[\"is invalid\"]}")
  #   end
  #
  #   it "should update the  driver location " do
  #     location = FactoryGirl.build(:location)
  #     location.driver_id = @driver.id
  #     location.save!
  #     put :location_update, params: {id: @driver.to_param, driver_params: {"latitude"=>"12.971", "longitude"=>"77.59", "accuracy"=>"0.7"}}
  #     expect(response.status).to eq(200)
  #     @driver.reload
  #     expect(@driver.location.latitude).not_to eql(location.latitude)
  #   end
  #
  #   it "should throw error if driver not exists" do
  #     put :location_update, params: {id: 000, driver_params: {"latitude"=>"12.971", "longitude"=>"77.59", "accuracy"=>"0.7"}}
  #     expect(response.status).to eq(404)
  #     expect(response.body).to eq("Record Not Found")
  #   end
  #
  # end

end
